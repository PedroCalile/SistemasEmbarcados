1. Como se utiliza o comando 'ps' para:
(a) Mostrar todos os processos rodando na máquina?
No terminal digite ps -a
(b) Mostrar os processos de um usuário?
ps -u 
(c) Ordenar todos os processos de acordo com o uso da CPU?
(d) Mostrar a quanto tempo cada processo está rodando?

 -a, --all       show processes of all users
 -e, --everyone  show processes of all users
 -f, --full      show process uids, ppids
 -h, --help      output usage information and exit
 -l, --long      show process uids, ppids, pgids, winpids
 -p, --process   show information for specified PID
 -s, --summary   show process summary
 -u, --user      list processes owned by UID
 -V, --version   output version information and exit
 -W, --windows   show windows as well as cygwin processes

2. De onde vem o nome fork()?
bifurcação.

3. Quais são as vantagens e desvantagens em utilizar:
(a) system()?
A função system oriunda da biblioteca padrão do C (stdlib.h) permite, de maneira
muito simples executar um comando dentro do programa em execução. A partir dele,
o sistema cria um sub-processo onde o comando é executado em um shell padrão.

#include <stdlib.h>
int main ()
{
int retorna_valor;
retorna_valor = system (“ls -l /”);
return retorna_valor;
}
vantangens:
--A(função(system(retorna(em(sua(saída(o(status(do(
comando(no(shell.(Se(o(shell(não(puder(ser(
executado,(o(system()(retorna(o(valor(127;(se(um(
outro(erro(ocorre,(a(função(retorna(T1.((
--O(uso(do(system()(não(é(recomendado(na(maioria(
dos(casos.(É(simples(mas(dá(brechas(a(falhas(de(
execução(pois(depende(de(muito(do(sistema.

Desvantagems:
Como a função system utiliza o shell para invocar um comando, ela fica sujeita às
características, limitações e falhas de segurança inerentes do shell do sistema. Além
disso, não se pode garantir que uma versão particular do shell Bourne (por exemplo)
esteja disponível. Ou até mesmo, restrições devido aos privilégios do usuário podem
inviabilizar o sistema em questão.

(b) fork() e exec()?
Fork:
Quando um programa chama o fork(), uma duplicação de processos, denominada
19
processo filho (child process) é criada. O processo pai continua a executar
normalmente o programa de onde o fork() foi chamado. Assim como o processo
filho também continua a execução desde o fork().
Então como é feita a distinção entre estes dois processos? Primeiro, o processo filho é
um novo processo e isso implica em um novo PID – diferente de seu pai. Uma maneira
de distinguir o filho do pai em um programa é simplesmente fazer uma chamada com
a função getpid(). Entretanto, a função fork() retorna valores distintos. O valor de
retorno no processo pai é o PID do processo filho, ou seja, retorna um novo PID. Já o
valor do retorno do filho é zero.

Exmplo:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main ()
{
pid_t child_pid;
printf (“the main program process ID is %d\n”, (int) getpid ());
child_pid = fork ();
if (child_pid != 0) {
printf (“this is the parent process, with id %d\n”, (int) getpid());
printf (“the child’s process ID is %d\n”, (int) child_pid);
}
else
printf (“this is the child process, with id %d\n”, (int) getpid());
return 0;
}

exec:
A função exec substitui o programa em execução de um processo por outro
programa. Quando um programa chama a função exec, o processo cessa
imediatamente a execução do programa corrente e passa a executar um novo
programa do início, isso se assumir que a chamada não possua ou encontre nenhum
erro.
A família exec são funções que variam sutilmente na sua funcionalidade e também na
maneira em que são chamados.
● Funções que contém a letra 'p' em seus nomes (execvp e execlp) aceitam que
o nome ou procura do programa esteja no current path; funções que não
possuem o 'p' devem conter o caminho completo do programa a ser executado.
● Funções que contém a letra 'v' em seus nomes (execv, execvp e execve)
aceitam que a lista de arqumentos do novo programa sejam nulos. Funções que
contém a letra 'l' aceitam em sua lista de argumentos a utilização de
mecanismos varargs em linguagem C.
● Funções que contém a letra 'e' em seus nomes (exece e execle) aceitam um
argumento adicional.

4. É possível utilizar o exec() sem executar o fork() antes?
nao, se nao fechar o progama atual.
No(Unix(não(há(meio(para(que(um(processo(crie(
outro(somente(mandando(executáTlo(diretamente.(
• Não(há(função(que(crie(e(execute(um(novo(
processo(em(um(único(passo.(((
• Para(isso,(utilizaTse(a(função(fork()(que(cria(uma(
cópia(do(processo(atual(e(em(seguida(a(função(
exec()(que(substitui(o(conteúdo(do(novo(processo(
por(um(novo(programa.

5. Quais são as características básicas das seguintes funções:
contem a letra p: aceitam o nome ou procura do programa no currente path, sem o p tem que escrever completo o nome:
Contem a letra v aceitam a lista de argumentos.
Contem a letra L aceitam a lista de argumentos utilizando de mecanismo de var args 
Contem a letra e aceitam argumeto adicional

(a) execp()?
contem a letra p: aceitam o nome ou procura do programa no currente path, sem o p 

(b) execv()?
Contem a letra v aceitam a lista de argumentos.
	
(c) exece()?
Contem a letra e aceitam argumeto adicional	

(d) execvp()?
contem a letra p: aceitam o nome ou procura do programa no currente path, sem o p tem que escrever completo o nome:
Contem a letra v aceitam a lista de argumentos.	

(e) execve()?
Contem a letra v aceitam a lista de argumentos.	
Contem a letra e aceitam argumeto adicional

(f) execle()?
Contem a letra I aceitam a lista de argumentos utilizando de mecanismo de var args 
Contem a letra e aceitam argumeto adicional
